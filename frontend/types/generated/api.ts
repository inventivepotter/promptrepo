/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v0/auth/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Verify session
         * @description Verify current session and return user information
         */
        get: operations["verify_session_api_v0_auth_verify_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout user
         * @description Logout user and invalidate session
         */
        post: operations["logout_api_v0_auth_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh session
         * @description Refresh session token to extend expiry
         */
        post: operations["refresh_session_api_v0_auth_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/auth/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Authentication health check
         * @description Health check specifically for auth routes
         */
        get: operations["auth_health_check_api_v0_auth_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/auth/login/github/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Initiate GitHub OAuth login
         * @description Start GitHub OAuth flow and get authorization URL
         */
        get: operations["initiate_github_login_api_v0_auth_login_github__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/auth/callback/github/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * GitHub OAuth callback
         * @description Handle GitHub OAuth callback and create user session
         */
        get: operations["github_oauth_callback_api_v0_auth_callback_github__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/llm/providers/configured": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get configured providers
         * @description Get configured LLM providers and their database.models based on AppConfig
         */
        get: operations["get_configured_providers_api_v0_llm_providers_configured_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/llm/providers/available": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available providers
         * @description Get all available LLM providers without requiring API keys
         */
        get: operations["get_available_providers_api_v0_llm_providers_available_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/llm/provider/{provider_id}/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Fetch database.models by provider
         * @description Fetch available database.models for a specific provider using API key
         */
        post: operations["fetch_models_by_provider_api_v0_llm_provider__provider_id__models_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/llm/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create chat completion
         * @description Create a chat completion using any-llm. Supports both streaming and non-streaming responses.
         */
        post: operations["chat_completions_api_v0_llm_completions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/llm/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Chat service health check
         * @description Health check for chat endpoints
         */
        get: operations["chat_health_check_api_v0_llm_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/config/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get configuration
         * @description Retrieve current application configuration. Returns public config when unauthenticated.
         */
        get: operations["get_config_api_v0_config__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update configuration
         * @description Update application configuration including LLM and repository configurations (partial update).
         */
        patch: operations["update_config_api_v0_config__patch"];
        trace?: never;
    };
    "/api/v0/llm/chat/providers/configured": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get configured providers
         * @description Get configured LLM providers and their database.models based on AppConfig
         */
        get: operations["get_configured_providers_api_v0_llm_chat_providers_configured_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/llm/chat/providers/available": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available providers
         * @description Get all available LLM providers without requiring API keys
         */
        get: operations["get_available_providers_api_v0_llm_chat_providers_available_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/llm/chat/provider/{provider_id}/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Fetch database.models by provider
         * @description Fetch available database.models for a specific provider using API key
         */
        post: operations["fetch_models_by_provider_api_v0_llm_chat_provider__provider_id__models_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/llm/chat/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create chat completion
         * @description Create a chat completion using any-llm. Supports both streaming and non-streaming responses.
         */
        post: operations["chat_completions_api_v0_llm_chat_completions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/llm/chat/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Chat service health check
         * @description Health check for chat endpoints
         */
        get: operations["chat_health_check_api_v0_llm_chat_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/repos/available": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available repositories
         * @description Get list of available repositories
         */
        get: operations["get_available_repositories_api_v0_repos_available_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/repos/configured": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get configured repositories
         * @description Get list of configured repositories for the authenticated user
         */
        get: operations["get_configured_repositories_api_v0_repos_configured_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/repos/branches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get repository branches
         * @description Get list of branches for a specific repository
         */
        get: operations["get_repository_branches_api_v0_repos_branches_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * API information
         * @description Get basic information about the API
         */
        get: operations["get_api_info_api_v0_info_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/prompts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get prompt
         * @description Get a specific prompt by repository name and file path. Checks user permissions based on hosting type.
         */
        get: operations["get_prompt_api_v0_prompts__get"];
        /**
         * Update prompt
         * @description Update an existing prompt. All fields in the update are optional.
         */
        put: operations["update_prompt_api_v0_prompts__put"];
        /**
         * Create prompt
         * @description Create a new prompt. The prompt will be saved to the specified repository and file path.
         */
        post: operations["create_prompt_api_v0_prompts__post"];
        /**
         * Delete prompt
         * @description Delete a prompt. Removes the prompt file from the repository.
         */
        delete: operations["delete_prompt_api_v0_prompts__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v0/prompts/discover": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Discover repository prompts
         * @description Discover prompts from one or more repositories. Scans and retrieves all prompt YAML/YML files from the specified repositories.
         */
        post: operations["discover_repository_prompts_api_v0_prompts_discover_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * APIInfo
         * @description API information model.
         */
        APIInfo: {
            /** Name */
            name: string;
            /** Version */
            version: string;
            /** Description */
            description: string;
            /** Documentation */
            documentation: {
                [key: string]: unknown;
            };
            /** Endpoints */
            endpoints: {
                [key: string]: unknown;
            };
        };
        /**
         * AppConfig
         * @description Main application configuration
         */
        "AppConfig-Input": {
            /** @description Hosting-specific configuration settings */
            hosting_config?: components["schemas"]["HostingConfig"] | null;
            /**
             * Oauth Configs
             * @description List of OAuth provider configurations
             */
            oauth_configs?: components["schemas"]["OAuthConfig"][] | null;
            /**
             * Llm Configs
             * @description List of LLM provider configurations
             */
            llm_configs?: components["schemas"]["LLMConfig"][] | null;
            /**
             * Repo Configs
             * @description List of repository configurations
             */
            repo_configs?: components["schemas"]["RepoConfig"][] | null;
        };
        /**
         * AppConfig
         * @description Main application configuration
         */
        "AppConfig-Output": {
            /** @description Hosting-specific configuration settings */
            hosting_config?: components["schemas"]["HostingConfig"] | null;
            /**
             * Oauth Configs
             * @description List of OAuth provider configurations
             */
            oauth_configs?: components["schemas"]["OAuthConfig"][] | null;
            /**
             * Llm Configs
             * @description List of LLM provider configurations
             */
            llm_configs?: components["schemas"]["LLMConfig"][] | null;
            /**
             * Repo Configs
             * @description List of repository configurations
             */
            repo_configs?: components["schemas"]["RepoConfig"][] | null;
        };
        /** AuthUrlResponseData */
        AuthUrlResponseData: {
            /** Authurl */
            authUrl: string;
        };
        /**
         * BasicProviderInfo
         * @description Basic provider info without models
         */
        BasicProviderInfo: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /**
             * Custom Api Base
             * @default false
             */
            custom_api_base: boolean;
        };
        /**
         * BasicProvidersResponse
         * @description Response for basic providers endpoint
         */
        BasicProvidersResponse: {
            /** Providers */
            providers: components["schemas"]["BasicProviderInfo"][];
        };
        /**
         * BranchInfo
         * @description Information about a repository branch
         */
        BranchInfo: {
            /**
             * Name
             * @description Branch name
             */
            name: string;
            /**
             * Is Default
             * @description Whether this is the default branch
             * @default false
             */
            is_default: boolean;
        };
        /**
         * ChatCompletionChoice
         * @description Choice in chat completion response
         */
        ChatCompletionChoice: {
            /** Index */
            index: number;
            message: components["schemas"]["ChatMessage"];
            /** Finish Reason */
            finish_reason?: string | null;
        };
        /**
         * ChatCompletionRequest
         * @description Request model for chat completions
         */
        ChatCompletionRequest: {
            /** Messages */
            messages: components["schemas"]["ChatMessage"][];
            /**
             * Provider
             * @description LLM provider (e.g., openai, mistral, anthropic)
             */
            provider: string;
            /**
             * Model
             * @description Model name (e.g., gpt-3.5-turbo, claude-3)
             */
            model: string;
            /**
             * Prompt Id
             * @description Optional prompt ID for context
             */
            prompt_id?: string | null;
            /**
             * Stream
             * @description Whether to stream the response
             * @default false
             */
            stream: boolean | null;
            /**
             * Temperature
             * @description Sampling temperature
             */
            temperature?: number | null;
            /**
             * Max Tokens
             * @description Maximum tokens to generate
             */
            max_tokens?: number | null;
            /**
             * Top P
             * @description Top-p sampling parameter
             */
            top_p?: number | null;
            /**
             * Frequency Penalty
             * @description Frequency penalty
             */
            frequency_penalty?: number | null;
            /**
             * Presence Penalty
             * @description Presence penalty
             */
            presence_penalty?: number | null;
            /**
             * Stop
             * @description Stop sequences
             */
            stop?: string[] | null;
        };
        /**
         * ChatCompletionResponse
         * @description Response model for chat completions
         */
        ChatCompletionResponse: {
            /** Id */
            id: string;
            /**
             * Object
             * @default chat.completion
             */
            object: string;
            /** Created */
            created: number;
            /** Model */
            model: string;
            /** Choices */
            choices: components["schemas"]["ChatCompletionChoice"][];
            usage?: components["schemas"]["UsageStats"] | null;
            /** Inference Time Ms */
            inference_time_ms?: number | null;
        };
        /**
         * ChatMessage
         * @description OpenAI-compatible message format
         */
        ChatMessage: {
            /**
             * Role
             * @enum {string}
             */
            role: "system" | "user" | "assistant" | "tool";
            /** Content */
            content: string;
            /** Tool Call Id */
            tool_call_id?: string | null;
            /** Tool Calls */
            tool_calls?: {
                [key: string]: unknown;
            }[] | null;
        };
        /**
         * CommitInfo
         * @description Represents information about a commit.
         */
        CommitInfo: {
            /** Commit Id */
            commit_id: string;
            /** Message */
            message: string;
            /** Author */
            author: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
        };
        /**
         * CompletionTokensDetails
         * @description Breakdown of tokens used in a completion
         */
        CompletionTokensDetails: {
            /** Accepted Prediction Tokens */
            accepted_prediction_tokens?: number | null;
            /** Audio Tokens */
            audio_tokens?: number | null;
            /** Reasoning Tokens */
            reasoning_tokens?: number | null;
            /** Rejected Prediction Tokens */
            rejected_prediction_tokens?: number | null;
        };
        /**
         * ConfiguredReposResponse
         * @description Response for configured repositories endpoint
         */
        ConfiguredReposResponse: {
            /**
             * Repositories
             * @description List of configured repositories
             */
            repositories: components["schemas"]["RepoConfig"][];
        };
        /**
         * DiscoverRepositoriesRequest
         * @description Request model for discovering prompts from repositories.
         */
        DiscoverRepositoriesRequest: {
            /**
             * Repo Names
             * @description List of repository names to discover prompts from (supports 'owner/repo' or 'repo' format)
             */
            repo_names: string[];
        };
        /**
         * FetchModelsRequest
         * @description Request model for fetching models from a provider
         */
        FetchModelsRequest: {
            /** Api Key */
            api_key: string;
            /**
             * Api Base
             * @default
             */
            api_base: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * HostingConfig
         * @description Hosting-specific configuration settings
         */
        HostingConfig: {
            /**
             * @description Hosting type: individual, organization
             * @default individual
             */
            type: components["schemas"]["HostingType"];
        };
        /**
         * HostingType
         * @enum {string}
         */
        HostingType: "individual" | "organization";
        /**
         * LLMConfig
         * @description LLM Provider configuration settings
         */
        LLMConfig: {
            /**
             * Id
             * @description Unique identifier for the llm configuration
             */
            id: string;
            /**
             * Provider
             * @description LLM provider name
             * @default
             */
            provider: string;
            /**
             * Model
             * @description LLM model name
             * @default
             */
            model: string;
            /**
             * Api Key
             * @description LLM API key
             * @default
             */
            api_key: string;
            /**
             * Api Base Url
             * @description LLM API base URL
             * @default
             */
            api_base_url: string;
            /**
             * @description Scope of the LLM config: 'organization' for ENV configs, 'user' for user-specific configs
             * @default organization
             */
            scope: components["schemas"]["LLMConfigScope"];
        };
        /**
         * LLMConfigScope
         * @enum {string}
         */
        LLMConfigScope: "organization" | "user";
        /** LoginResponseData */
        LoginResponseData: {
            user: components["schemas"]["User"];
            /** Expiresat */
            expiresAt: string;
            /** Promptreporedirecturl */
            promptrepoRedirectUrl?: string | null;
        };
        /**
         * ModelInfo
         * @description Information about a specific model
         */
        ModelInfo: {
            /** Id */
            id: string;
            /** Name */
            name: string;
        };
        /**
         * ModelsResponse
         * @description Response for database.models endpoint
         */
        ModelsResponse: {
            /** Models */
            models: components["schemas"]["ModelInfo"][];
        };
        /**
         * OAuthConfig
         * @description Authentication-specific configuration settings
         */
        OAuthConfig: {
            /**
             * Provider
             * @description OAuth provider name (e.g., 'github', 'google', 'microsoft')
             * @default
             */
            provider: string;
            /**
             * Client Id
             * @description OAuth client ID
             * @default
             */
            client_id: string;
            /**
             * Client Secret
             * @description OAuth client secret
             * @default
             */
            client_secret: string;
            /**
             * Redirect Url
             * @description OAuth redirect URL
             * @default
             */
            redirect_url: string;
        };
        /**
         * OAuthProvider
         * @description Supported OAuth providers
         * @enum {string}
         */
        OAuthProvider: "github" | "gitlab" | "bitbucket";
        /**
         * PromptData
         * @description Core prompt data model with all fields that get saved to YAML files.
         *     This model represents the complete prompt configuration including LLM parameters.
         */
        PromptData: {
            /**
             * Id
             * @description Unique identifier for the prompt
             */
            id: string;
            /**
             * Name
             * @description Prompt name
             */
            name: string;
            /**
             * Description
             * @description Prompt description
             */
            description?: string | null;
            /**
             * Provider
             * @description LLM provider (e.g., openai, anthropic)
             */
            provider: string;
            /**
             * Model
             * @description Model name (e.g., gpt-4, claude-3)
             */
            model: string;
            /**
             * Failover Model
             * @description Backup model if primary fails
             */
            failover_model?: string | null;
            /**
             * Prompt
             * @description Combined prompt content
             */
            prompt: string;
            /**
             * Tool Choice
             * @description Tool choice configuration
             */
            tool_choice?: string | {
                [key: string]: unknown;
            } | null;
            /**
             * Temperature
             * @description Sampling temperature
             * @default 0
             */
            temperature: number;
            /**
             * Top P
             * @description Top-p sampling parameter
             */
            top_p?: number | null;
            /**
             * Max Tokens
             * @description Maximum tokens to generate
             */
            max_tokens?: number | null;
            /**
             * Response Format
             * @description Response format configuration
             */
            response_format?: {
                [key: string]: unknown;
            } | null;
            /**
             * Stream
             * @description Whether to stream the response
             */
            stream?: boolean | null;
            /**
             * N Completions
             * @description Number of completions to generate
             */
            n_completions?: number | null;
            /**
             * Stop
             * @description Stop sequences
             */
            stop?: string[] | string | null;
            /**
             * Presence Penalty
             * @description Presence penalty
             */
            presence_penalty?: number | null;
            /**
             * Frequency Penalty
             * @description Frequency penalty
             */
            frequency_penalty?: number | null;
            /**
             * Seed
             * @description Random seed for reproducibility
             */
            seed?: number | null;
            /**
             * Api Key
             * @description API key override
             */
            api_key?: string | null;
            /**
             * Api Base
             * @description API base URL override
             */
            api_base?: string | null;
            /**
             * User
             * @description User identifier for tracking
             */
            user?: string | null;
            /**
             * Parallel Tool Calls
             * @description Enable parallel tool calls
             */
            parallel_tool_calls?: boolean | null;
            /**
             * Logprobs
             * @description Return log probabilities
             */
            logprobs?: boolean | null;
            /**
             * Top Logprobs
             * @description Number of top log probabilities
             */
            top_logprobs?: number | null;
            /**
             * Logit Bias
             * @description Logit bias adjustments
             */
            logit_bias?: {
                [key: string]: number;
            } | null;
            /**
             * Stream Options
             * @description Streaming options
             */
            stream_options?: {
                [key: string]: unknown;
            } | null;
            /**
             * Max Completion Tokens
             * @description Maximum completion tokens
             */
            max_completion_tokens?: number | null;
            /**
             * Reasoning Effort
             * @description Reasoning effort level
             * @default auto
             */
            reasoning_effort: ("minimal" | "low" | "medium" | "high" | "auto") | null;
            /**
             * Extra Args
             * @description Additional provider-specific arguments
             */
            extra_args?: {
                [key: string]: unknown;
            } | null;
            /**
             * Tags
             * @description Tags for prompt categorization
             */
            tags?: string[];
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp
             */
            created_at?: string;
            /**
             * Updated At
             * Format: date-time
             * @description Last update timestamp
             */
            updated_at?: string;
        };
        /**
         * PromptDataUpdate
         * @description Partial model for updating prompt data.
         *     All fields from PromptData are optional to allow partial updates.
         *     This is essentially Partial<PromptData> for update operations.
         */
        PromptDataUpdate: {
            /**
             * Id
             * @description Unique identifier for the prompt
             */
            id?: string | null;
            /**
             * Name
             * @description Prompt name
             */
            name?: string | null;
            /**
             * Description
             * @description Prompt description
             */
            description?: string | null;
            /**
             * Provider
             * @description LLM provider (e.g., openai, anthropic)
             */
            provider?: string | null;
            /**
             * Model
             * @description Model name (e.g., gpt-4, claude-3)
             */
            model?: string | null;
            /**
             * Failover Model
             * @description Backup model if primary fails
             */
            failover_model?: string | null;
            /**
             * Prompt
             * @description Combined prompt content
             */
            prompt?: string | null;
            /**
             * Tool Choice
             * @description Tool choice configuration
             */
            tool_choice?: string | {
                [key: string]: unknown;
            } | null;
            /**
             * Temperature
             * @description Sampling temperature
             */
            temperature?: number | null;
            /**
             * Top P
             * @description Top-p sampling parameter
             */
            top_p?: number | null;
            /**
             * Max Tokens
             * @description Maximum tokens to generate
             */
            max_tokens?: number | null;
            /**
             * Response Format
             * @description Response format configuration
             */
            response_format?: {
                [key: string]: unknown;
            } | null;
            /**
             * Stream
             * @description Whether to stream the response
             */
            stream?: boolean | null;
            /**
             * N Completions
             * @description Number of completions to generate
             */
            n_completions?: number | null;
            /**
             * Stop
             * @description Stop sequences
             */
            stop?: string[] | string | null;
            /**
             * Presence Penalty
             * @description Presence penalty
             */
            presence_penalty?: number | null;
            /**
             * Frequency Penalty
             * @description Frequency penalty
             */
            frequency_penalty?: number | null;
            /**
             * Seed
             * @description Random seed for reproducibility
             */
            seed?: number | null;
            /**
             * Api Key
             * @description API key override
             */
            api_key?: string | null;
            /**
             * Api Base
             * @description API base URL override
             */
            api_base?: string | null;
            /**
             * User
             * @description User identifier for tracking
             */
            user?: string | null;
            /**
             * Parallel Tool Calls
             * @description Enable parallel tool calls
             */
            parallel_tool_calls?: boolean | null;
            /**
             * Logprobs
             * @description Return log probabilities
             */
            logprobs?: boolean | null;
            /**
             * Top Logprobs
             * @description Number of top log probabilities
             */
            top_logprobs?: number | null;
            /**
             * Logit Bias
             * @description Logit bias adjustments
             */
            logit_bias?: {
                [key: string]: number;
            } | null;
            /**
             * Stream Options
             * @description Streaming options
             */
            stream_options?: {
                [key: string]: unknown;
            } | null;
            /**
             * Max Completion Tokens
             * @description Maximum completion tokens
             */
            max_completion_tokens?: number | null;
            /**
             * Reasoning Effort
             * @description Reasoning effort level
             */
            reasoning_effort?: ("minimal" | "low" | "medium" | "high" | "auto") | null;
            /**
             * Extra Args
             * @description Additional provider-specific arguments
             */
            extra_args?: {
                [key: string]: unknown;
            } | null;
            /**
             * Tags
             * @description Tags for prompt categorization
             */
            tags?: string[] | null;
        };
        /**
         * PromptMeta
         * @description Prompt metadata model that wraps PromptData with repository information.
         */
        PromptMeta: {
            /** @description Complete prompt data */
            prompt: components["schemas"]["PromptData"];
            /**
             * Recent Commits
             * @description Recent 5 commits for this prompt file
             */
            recent_commits?: components["schemas"]["CommitInfo"][] | null;
            /**
             * Repo Name
             * @description Repository name where prompt is stored
             */
            repo_name: string;
            /**
             * File Path
             * @description File path within the repository
             */
            file_path: string;
        };
        /**
         * PromptTokensDetails
         * @description Breakdown of tokens used in the prompt
         */
        PromptTokensDetails: {
            /** Audio Tokens */
            audio_tokens?: number | null;
            /** Cached Tokens */
            cached_tokens?: number | null;
        };
        /**
         * ProviderInfo
         * @description Information about an LLM provider
         */
        ProviderInfo: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Models */
            models: components["schemas"]["ModelInfo"][];
        };
        /**
         * ProvidersResponse
         * @description Response for configured providers endpoint
         */
        ProvidersResponse: {
            /** Providers */
            providers: components["schemas"]["ProviderInfo"][];
        };
        /**
         * RepoConfig
         * @description Repository management settings
         */
        RepoConfig: {
            /**
             * Id
             * @description Unique identifier for the repository configuration
             */
            id: string;
            /**
             * Repo Name
             * @description Repository name (e.g., 'owner/repo-name')
             * @default
             */
            repo_name: string;
            /**
             * Repo Url
             * @description Repository URL
             * @default
             */
            repo_url: string;
            /**
             * Base Branch
             * @description Repository base branch
             * @default main
             */
            base_branch: string;
            /**
             * Current Branch
             * @description Repository current branch
             * @default main
             */
            current_branch: string | null;
        };
        /** RepoInfo */
        RepoInfo: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Full Name */
            full_name: string;
            /** Clone Url */
            clone_url: string;
            /** Owner */
            owner: string;
            /**
             * Private
             * @default false
             */
            private: boolean;
            /**
             * Default Branch
             * @default main
             */
            default_branch: string;
            /** Language */
            language?: string | null;
            /**
             * Size
             * @default 0
             */
            size: number;
            /** Updated At */
            updated_at?: string | null;
            /** All Branches */
            all_branches?: string[] | null;
        };
        /**
         * RepositoryBranchesResponse
         * @description Response for repository branches endpoint
         */
        RepositoryBranchesResponse: {
            /**
             * Branches
             * @description List of repository branches
             */
            branches: components["schemas"]["BranchInfo"][];
            /**
             * Default Branch
             * @description The default branch name
             */
            default_branch: string;
        };
        /**
         * RepositoryList
         * @description Pydantic model for a list of repositories.
         */
        RepositoryList: {
            /** Repositories */
            repositories: components["schemas"]["RepoInfo"][];
        };
        /**
         * ResponseMeta
         * @description Metadata included with all responses.
         */
        ResponseMeta: {
            /**
             * Timestamp
             * Format: date-time
             * @description UTC timestamp of the response
             */
            timestamp?: string;
            /**
             * Request Id
             * @description Unique request identifier for tracing
             */
            request_id?: string | null;
            /**
             * Version
             * @description API version
             * @default 1.0.0
             */
            version: string;
            /**
             * Correlation Id
             * @description Correlation ID for distributed tracing
             */
            correlation_id?: string | null;
        };
        /**
         * ResponseStatus
         * @description Standard response status values.
         * @enum {string}
         */
        ResponseStatus: "success" | "error" | "partial";
        /**
         * StandardResponse[APIInfo]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Example"
         *       },
         *       "message": "Operation completed successfully",
         *       "meta": {
         *         "request_id": "req_123",
         *         "timestamp": "2024-01-01T00:00:00Z",
         *         "version": "1.0.0"
         *       },
         *       "status": "success"
         *     }
         */
        StandardResponse_APIInfo_: {
            /**
             * @description Response status indicator
             * @default success
             */
            status: components["schemas"]["ResponseStatus"];
            /**
             * Status Code
             * @description HTTP status code
             * @default 200
             */
            status_code: number;
            /** @description Response payload */
            data?: components["schemas"]["APIInfo"] | null;
            /**
             * Message
             * @description Human-readable message about the response
             */
            message?: string | null;
            /** @description Response metadata */
            meta?: components["schemas"]["ResponseMeta"];
        };
        /**
         * StandardResponse[AppConfig]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Example"
         *       },
         *       "message": "Operation completed successfully",
         *       "meta": {
         *         "request_id": "req_123",
         *         "timestamp": "2024-01-01T00:00:00Z",
         *         "version": "1.0.0"
         *       },
         *       "status": "success"
         *     }
         */
        StandardResponse_AppConfig_: {
            /**
             * @description Response status indicator
             * @default success
             */
            status: components["schemas"]["ResponseStatus"];
            /**
             * Status Code
             * @description HTTP status code
             * @default 200
             */
            status_code: number;
            /** @description Response payload */
            data?: components["schemas"]["AppConfig-Output"] | null;
            /**
             * Message
             * @description Human-readable message about the response
             */
            message?: string | null;
            /** @description Response metadata */
            meta?: components["schemas"]["ResponseMeta"];
        };
        /**
         * StandardResponse[AuthUrlResponseData]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Example"
         *       },
         *       "message": "Operation completed successfully",
         *       "meta": {
         *         "request_id": "req_123",
         *         "timestamp": "2024-01-01T00:00:00Z",
         *         "version": "1.0.0"
         *       },
         *       "status": "success"
         *     }
         */
        StandardResponse_AuthUrlResponseData_: {
            /**
             * @description Response status indicator
             * @default success
             */
            status: components["schemas"]["ResponseStatus"];
            /**
             * Status Code
             * @description HTTP status code
             * @default 200
             */
            status_code: number;
            /** @description Response payload */
            data?: components["schemas"]["AuthUrlResponseData"] | null;
            /**
             * Message
             * @description Human-readable message about the response
             */
            message?: string | null;
            /** @description Response metadata */
            meta?: components["schemas"]["ResponseMeta"];
        };
        /**
         * StandardResponse[BasicProvidersResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Example"
         *       },
         *       "message": "Operation completed successfully",
         *       "meta": {
         *         "request_id": "req_123",
         *         "timestamp": "2024-01-01T00:00:00Z",
         *         "version": "1.0.0"
         *       },
         *       "status": "success"
         *     }
         */
        StandardResponse_BasicProvidersResponse_: {
            /**
             * @description Response status indicator
             * @default success
             */
            status: components["schemas"]["ResponseStatus"];
            /**
             * Status Code
             * @description HTTP status code
             * @default 200
             */
            status_code: number;
            /** @description Response payload */
            data?: components["schemas"]["BasicProvidersResponse"] | null;
            /**
             * Message
             * @description Human-readable message about the response
             */
            message?: string | null;
            /** @description Response metadata */
            meta?: components["schemas"]["ResponseMeta"];
        };
        /**
         * StandardResponse[ChatCompletionResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Example"
         *       },
         *       "message": "Operation completed successfully",
         *       "meta": {
         *         "request_id": "req_123",
         *         "timestamp": "2024-01-01T00:00:00Z",
         *         "version": "1.0.0"
         *       },
         *       "status": "success"
         *     }
         */
        StandardResponse_ChatCompletionResponse_: {
            /**
             * @description Response status indicator
             * @default success
             */
            status: components["schemas"]["ResponseStatus"];
            /**
             * Status Code
             * @description HTTP status code
             * @default 200
             */
            status_code: number;
            /** @description Response payload */
            data?: components["schemas"]["ChatCompletionResponse"] | null;
            /**
             * Message
             * @description Human-readable message about the response
             */
            message?: string | null;
            /** @description Response metadata */
            meta?: components["schemas"]["ResponseMeta"];
        };
        /**
         * StandardResponse[ConfiguredReposResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Example"
         *       },
         *       "message": "Operation completed successfully",
         *       "meta": {
         *         "request_id": "req_123",
         *         "timestamp": "2024-01-01T00:00:00Z",
         *         "version": "1.0.0"
         *       },
         *       "status": "success"
         *     }
         */
        StandardResponse_ConfiguredReposResponse_: {
            /**
             * @description Response status indicator
             * @default success
             */
            status: components["schemas"]["ResponseStatus"];
            /**
             * Status Code
             * @description HTTP status code
             * @default 200
             */
            status_code: number;
            /** @description Response payload */
            data?: components["schemas"]["ConfiguredReposResponse"] | null;
            /**
             * Message
             * @description Human-readable message about the response
             */
            message?: string | null;
            /** @description Response metadata */
            meta?: components["schemas"]["ResponseMeta"];
        };
        /**
         * StandardResponse[List[PromptMeta]]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Example"
         *       },
         *       "message": "Operation completed successfully",
         *       "meta": {
         *         "request_id": "req_123",
         *         "timestamp": "2024-01-01T00:00:00Z",
         *         "version": "1.0.0"
         *       },
         *       "status": "success"
         *     }
         */
        StandardResponse_List_PromptMeta__: {
            /**
             * @description Response status indicator
             * @default success
             */
            status: components["schemas"]["ResponseStatus"];
            /**
             * Status Code
             * @description HTTP status code
             * @default 200
             */
            status_code: number;
            /**
             * Data
             * @description Response payload
             */
            data?: components["schemas"]["PromptMeta"][] | null;
            /**
             * Message
             * @description Human-readable message about the response
             */
            message?: string | null;
            /** @description Response metadata */
            meta?: components["schemas"]["ResponseMeta"];
        };
        /**
         * StandardResponse[LoginResponseData]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Example"
         *       },
         *       "message": "Operation completed successfully",
         *       "meta": {
         *         "request_id": "req_123",
         *         "timestamp": "2024-01-01T00:00:00Z",
         *         "version": "1.0.0"
         *       },
         *       "status": "success"
         *     }
         */
        StandardResponse_LoginResponseData_: {
            /**
             * @description Response status indicator
             * @default success
             */
            status: components["schemas"]["ResponseStatus"];
            /**
             * Status Code
             * @description HTTP status code
             * @default 200
             */
            status_code: number;
            /** @description Response payload */
            data?: components["schemas"]["LoginResponseData"] | null;
            /**
             * Message
             * @description Human-readable message about the response
             */
            message?: string | null;
            /** @description Response metadata */
            meta?: components["schemas"]["ResponseMeta"];
        };
        /**
         * StandardResponse[ModelsResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Example"
         *       },
         *       "message": "Operation completed successfully",
         *       "meta": {
         *         "request_id": "req_123",
         *         "timestamp": "2024-01-01T00:00:00Z",
         *         "version": "1.0.0"
         *       },
         *       "status": "success"
         *     }
         */
        StandardResponse_ModelsResponse_: {
            /**
             * @description Response status indicator
             * @default success
             */
            status: components["schemas"]["ResponseStatus"];
            /**
             * Status Code
             * @description HTTP status code
             * @default 200
             */
            status_code: number;
            /** @description Response payload */
            data?: components["schemas"]["ModelsResponse"] | null;
            /**
             * Message
             * @description Human-readable message about the response
             */
            message?: string | null;
            /** @description Response metadata */
            meta?: components["schemas"]["ResponseMeta"];
        };
        /**
         * StandardResponse[NoneType]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Example"
         *       },
         *       "message": "Operation completed successfully",
         *       "meta": {
         *         "request_id": "req_123",
         *         "timestamp": "2024-01-01T00:00:00Z",
         *         "version": "1.0.0"
         *       },
         *       "status": "success"
         *     }
         */
        StandardResponse_NoneType_: {
            /**
             * @description Response status indicator
             * @default success
             */
            status: components["schemas"]["ResponseStatus"];
            /**
             * Status Code
             * @description HTTP status code
             * @default 200
             */
            status_code: number;
            /**
             * Data
             * @description Response payload
             */
            data?: null;
            /**
             * Message
             * @description Human-readable message about the response
             */
            message?: string | null;
            /** @description Response metadata */
            meta?: components["schemas"]["ResponseMeta"];
        };
        /**
         * StandardResponse[PromptMeta]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Example"
         *       },
         *       "message": "Operation completed successfully",
         *       "meta": {
         *         "request_id": "req_123",
         *         "timestamp": "2024-01-01T00:00:00Z",
         *         "version": "1.0.0"
         *       },
         *       "status": "success"
         *     }
         */
        StandardResponse_PromptMeta_: {
            /**
             * @description Response status indicator
             * @default success
             */
            status: components["schemas"]["ResponseStatus"];
            /**
             * Status Code
             * @description HTTP status code
             * @default 200
             */
            status_code: number;
            /** @description Response payload */
            data?: components["schemas"]["PromptMeta"] | null;
            /**
             * Message
             * @description Human-readable message about the response
             */
            message?: string | null;
            /** @description Response metadata */
            meta?: components["schemas"]["ResponseMeta"];
        };
        /**
         * StandardResponse[ProvidersResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Example"
         *       },
         *       "message": "Operation completed successfully",
         *       "meta": {
         *         "request_id": "req_123",
         *         "timestamp": "2024-01-01T00:00:00Z",
         *         "version": "1.0.0"
         *       },
         *       "status": "success"
         *     }
         */
        StandardResponse_ProvidersResponse_: {
            /**
             * @description Response status indicator
             * @default success
             */
            status: components["schemas"]["ResponseStatus"];
            /**
             * Status Code
             * @description HTTP status code
             * @default 200
             */
            status_code: number;
            /** @description Response payload */
            data?: components["schemas"]["ProvidersResponse"] | null;
            /**
             * Message
             * @description Human-readable message about the response
             */
            message?: string | null;
            /** @description Response metadata */
            meta?: components["schemas"]["ResponseMeta"];
        };
        /**
         * StandardResponse[RepositoryBranchesResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Example"
         *       },
         *       "message": "Operation completed successfully",
         *       "meta": {
         *         "request_id": "req_123",
         *         "timestamp": "2024-01-01T00:00:00Z",
         *         "version": "1.0.0"
         *       },
         *       "status": "success"
         *     }
         */
        StandardResponse_RepositoryBranchesResponse_: {
            /**
             * @description Response status indicator
             * @default success
             */
            status: components["schemas"]["ResponseStatus"];
            /**
             * Status Code
             * @description HTTP status code
             * @default 200
             */
            status_code: number;
            /** @description Response payload */
            data?: components["schemas"]["RepositoryBranchesResponse"] | null;
            /**
             * Message
             * @description Human-readable message about the response
             */
            message?: string | null;
            /** @description Response metadata */
            meta?: components["schemas"]["ResponseMeta"];
        };
        /**
         * StandardResponse[RepositoryList]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Example"
         *       },
         *       "message": "Operation completed successfully",
         *       "meta": {
         *         "request_id": "req_123",
         *         "timestamp": "2024-01-01T00:00:00Z",
         *         "version": "1.0.0"
         *       },
         *       "status": "success"
         *     }
         */
        StandardResponse_RepositoryList_: {
            /**
             * @description Response status indicator
             * @default success
             */
            status: components["schemas"]["ResponseStatus"];
            /**
             * Status Code
             * @description HTTP status code
             * @default 200
             */
            status_code: number;
            /** @description Response payload */
            data?: components["schemas"]["RepositoryList"] | null;
            /**
             * Message
             * @description Human-readable message about the response
             */
            message?: string | null;
            /** @description Response metadata */
            meta?: components["schemas"]["ResponseMeta"];
        };
        /**
         * StandardResponse[User]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Example"
         *       },
         *       "message": "Operation completed successfully",
         *       "meta": {
         *         "request_id": "req_123",
         *         "timestamp": "2024-01-01T00:00:00Z",
         *         "version": "1.0.0"
         *       },
         *       "status": "success"
         *     }
         */
        StandardResponse_User_: {
            /**
             * @description Response status indicator
             * @default success
             */
            status: components["schemas"]["ResponseStatus"];
            /**
             * Status Code
             * @description HTTP status code
             * @default 200
             */
            status_code: number;
            /** @description Response payload */
            data?: components["schemas"]["User"] | null;
            /**
             * Message
             * @description Human-readable message about the response
             */
            message?: string | null;
            /** @description Response metadata */
            meta?: components["schemas"]["ResponseMeta"];
        };
        /**
         * StandardResponse[dict]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Example"
         *       },
         *       "message": "Operation completed successfully",
         *       "meta": {
         *         "request_id": "req_123",
         *         "timestamp": "2024-01-01T00:00:00Z",
         *         "version": "1.0.0"
         *       },
         *       "status": "success"
         *     }
         */
        StandardResponse_dict_: {
            /**
             * @description Response status indicator
             * @default success
             */
            status: components["schemas"]["ResponseStatus"];
            /**
             * Status Code
             * @description HTTP status code
             * @default 200
             */
            status_code: number;
            /**
             * Data
             * @description Response payload
             */
            data?: {
                [key: string]: unknown;
            } | null;
            /**
             * Message
             * @description Human-readable message about the response
             */
            message?: string | null;
            /** @description Response metadata */
            meta?: components["schemas"]["ResponseMeta"];
        };
        /**
         * UsageStats
         * @description Usage statistics for chat completion
         */
        UsageStats: {
            /** Prompt Tokens */
            prompt_tokens?: number | null;
            /** Completion Tokens */
            completion_tokens?: number | null;
            /** Total Tokens */
            total_tokens?: number | null;
            prompt_tokens_details?: components["schemas"]["PromptTokensDetails"] | null;
            completion_tokens_details?: components["schemas"]["CompletionTokensDetails"] | null;
        };
        /**
         * User
         * @description User table model representing authenticated users.
         */
        User: {
            /**
             * Id
             * @description Unique user identifier
             */
            id?: string;
            /** @description OAuth provider, e.g., 'github' */
            oauth_provider: components["schemas"]["OAuthProvider"];
            /**
             * Oauth Username
             * @description OAuth username
             */
            oauth_username: string;
            /**
             * Oauth Name
             * @description OAuth display name
             */
            oauth_name?: string | null;
            /**
             * Oauth Email
             * @description OAuth email
             */
            oauth_email?: string | null;
            /**
             * Oauth Avatar Url
             * @description OAuth avatar URL
             */
            oauth_avatar_url?: string | null;
            /**
             * Oauth User Id
             * @description OAuth user ID
             */
            oauth_user_id?: string | null;
            /**
             * Oauth Profile Url
             * @description OAuth profile URL
             */
            oauth_profile_url?: string | null;
            /**
             * Created At
             * Format: date-time
             * @description When the user was created
             */
            created_at?: string;
            /**
             * Modified At
             * Format: date-time
             * @description When the user was last modified
             */
            modified_at?: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    verify_session_api_v0_auth_verify_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_User_"];
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/authentication-required",
                     *       "title": "Authentication required",
                     *       "detail": "Invalid or expired session token"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    logout_api_v0_auth_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_dict_"];
                };
            };
        };
    };
    refresh_session_api_v0_auth_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_NoneType_"];
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/authentication-required",
                     *       "title": "Authentication required",
                     *       "detail": "Invalid session token"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Failed to refresh session"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    auth_health_check_api_v0_auth_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_dict_"];
                };
            };
        };
    };
    initiate_github_login_api_v0_auth_login_github__get: {
        parameters: {
            query?: {
                /** @description PromptRepo app URL to redirect after login */
                promptrepo_redirect_url?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_AuthUrlResponseData_"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/bad-request",
                     *       "title": "Bad request",
                     *       "detail": "Redirect URI parameter is required"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Provider not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/not-found",
                     *       "title": "Provider not found",
                     *       "detail": "OAuth provider 'github' is not supported"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Failed to generate authentication URL"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Service unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/service-unavailable",
                     *       "title": "Service unavailable",
                     *       "detail": "OAuth provider is not properly configured"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    github_oauth_callback_api_v0_auth_callback_github__get: {
        parameters: {
            query: {
                /** @description Authorization code from GitHub */
                code: string;
                /** @description State parameter for CSRF verification */
                state: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_LoginResponseData_"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/bad-request",
                     *       "title": "Bad request",
                     *       "detail": "Invalid or expired state parameter"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Authentication failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/authentication-failed",
                     *       "title": "Authentication failed",
                     *       "detail": "Failed to exchange authorization code for token"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Authentication failed due to server error"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    get_configured_providers_api_v0_llm_providers_configured_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_ProvidersResponse_"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Failed to retrieve configured providers"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    get_available_providers_api_v0_llm_providers_available_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_BasicProvidersResponse_"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Failed to retrieve available providers"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    fetch_models_by_provider_api_v0_llm_provider__provider_id__models_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FetchModelsRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_ModelsResponse_"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/bad-request",
                     *       "title": "Bad request",
                     *       "detail": "Provider ID mismatch"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Failed to fetch models"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    chat_completions_api_v0_llm_completions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatCompletionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_ChatCompletionResponse_"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/bad-request",
                     *       "title": "Bad request",
                     *       "detail": "Invalid provider or model"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Completion failed"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    chat_health_check_api_v0_llm_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_dict_"];
                };
            };
        };
    };
    get_config_api_v0_config__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_AppConfig_"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Failed to retrieve configuration"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    update_config_api_v0_config__patch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AppConfig-Input"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_AppConfig_"];
                };
            };
            /** @description Invalid configuration data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/bad-request",
                     *       "title": "Bad request",
                     *       "detail": "Invalid configuration parameters"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/validation-failed",
                     *       "title": "Validation Error",
                     *       "detail": "The request contains invalid data"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Failed to update configuration"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    get_configured_providers_api_v0_llm_chat_providers_configured_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_ProvidersResponse_"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Failed to retrieve configured providers"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    get_available_providers_api_v0_llm_chat_providers_available_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_BasicProvidersResponse_"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Failed to retrieve available providers"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    fetch_models_by_provider_api_v0_llm_chat_provider__provider_id__models_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FetchModelsRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_ModelsResponse_"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/bad-request",
                     *       "title": "Bad request",
                     *       "detail": "Provider ID mismatch"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Failed to fetch models"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    chat_completions_api_v0_llm_chat_completions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatCompletionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_ChatCompletionResponse_"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/bad-request",
                     *       "title": "Bad request",
                     *       "detail": "Invalid provider or model"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Completion failed"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    chat_health_check_api_v0_llm_chat_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_dict_"];
                };
            };
        };
    };
    get_available_repositories_api_v0_repos_available_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_RepositoryList_"];
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/authentication-required",
                     *       "title": "Authentication required",
                     *       "detail": "Session not found or invalid"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Failed to retrieve repositories"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    get_configured_repositories_api_v0_repos_configured_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_ConfiguredReposResponse_"];
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/authentication-required",
                     *       "title": "Authentication required",
                     *       "detail": "Valid session required"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Failed to retrieve configured repositories"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    get_repository_branches_api_v0_repos_branches_get: {
        parameters: {
            query: {
                /** @description Repository owner/organization */
                owner: string;
                /** @description Repository name */
                repo: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_RepositoryBranchesResponse_"];
                };
            };
            /** @description Authentication required */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/authentication-required",
                     *       "title": "Authentication required",
                     *       "detail": "Session not found or invalid"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Repository not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/not-found",
                     *       "title": "Not Found",
                     *       "detail": "Repository not found"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Failed to retrieve repository branches"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    get_api_info_api_v0_info_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_APIInfo_"];
                };
            };
        };
    };
    get_prompt_api_v0_prompts__get: {
        parameters: {
            query: {
                repo_name: string;
                file_path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_PromptMeta_"];
                };
            };
            /** @description Prompt not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/not-found",
                     *       "title": "Prompt Not Found",
                     *       "detail": "Prompt with ID 'xxx' not found or access denied"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Failed to retrieve prompt"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    update_prompt_api_v0_prompts__put: {
        parameters: {
            query: {
                repo_name: string;
                file_path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromptDataUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_PromptMeta_"];
                };
            };
            /** @description Invalid prompt data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/validation-failed",
                     *       "title": "Validation Error",
                     *       "detail": "Invalid prompt data"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Prompt not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/not-found",
                     *       "title": "Prompt Not Found",
                     *       "detail": "Prompt with ID 'xxx' not found or access denied"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Failed to update prompt"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    create_prompt_api_v0_prompts__post: {
        parameters: {
            query: {
                repo_name: string;
                file_path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromptData"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_PromptMeta_"];
                };
            };
            /** @description Invalid prompt data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/validation-failed",
                     *       "title": "Validation Error",
                     *       "detail": "Invalid prompt data"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Failed to create prompt"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    delete_prompt_api_v0_prompts__delete: {
        parameters: {
            query: {
                repo_name: string;
                file_path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_NoneType_"];
                };
            };
            /** @description Prompt not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/not-found",
                     *       "title": "Prompt Not Found",
                     *       "detail": "Prompt with ID 'xxx' not found or access denied"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Failed to delete prompt"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
    discover_repository_prompts_api_v0_prompts_discover_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DiscoverRepositoriesRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StandardResponse_List_PromptMeta__"];
                };
            };
            /** @description Bad request or all repositories failed to discover prompts */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/bad-request",
                     *       "title": "Bad Request",
                     *       "detail": "Failed to discover prompts from all repositories"
                     *     } */
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "status": "error",
                     *       "type": "/errors/internal-server-error",
                     *       "title": "Internal Server Error",
                     *       "detail": "Failed to discover prompts"
                     *     } */
                    "application/json": unknown;
                };
            };
        };
    };
}
